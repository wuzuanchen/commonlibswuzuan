package com.wu.commonlibs.baseadapter;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.BaseAdapter;import java.util.ArrayList;import java.util.List;/** * 基础抽象适配器 子项可增删改 * @param <T> */public abstract class MyBaseAdpter<T> extends BaseAdapter {	protected LayoutInflater inflater;	protected List<T> list;	public MyBaseAdpter() {		list = new ArrayList<T>();	}	/**	 * 清除所有数据	 */	public void removeAll() {		list.clear();		this.notifyDataSetChanged();	}	/**	 * 添加新数据，是否删除清除旧数据	 * @param items	 * @param isclear	 */	public void addList(List<T> items, boolean isclear) {		if (isclear) {			list.clear();		}		if (items != null)			list.addAll(items);		this.notifyDataSetChanged();	}	/**	 * 移除某行	 * @param p	 */	public void removeByPs(int p) {		if (list != null && p < list.size()) {			list.remove(p);		}		this.notifyDataSetChanged();	}	/**	 * 添加某项	 * @param tt	 */	public void addItem(T tt) {		list.add(tt);		this.notifyDataSetChanged();	}	/**	 * 更新某项数据	 * @param tt	 * @param p	 */	public void updateItem(T tt, int p) {		if (p > -1 && p < list.size()) {			list.set(p, tt);		}		this.notifyDataSetChanged();	}	/**	 *  更新某项数据	 * @param pos	 * @param t	 * @param lv	 */	public void updateItem(T t,int pos,  AdapterView<?> lv) {		if (pos < list.size() && t != null) {			list.set(pos, t);			View view = lv.getChildAt(pos + 1 - lv.getFirstVisiblePosition());			if (view != null) {				reshItem(view, t, pos, lv);			}		}	}	/**	 * 将单行的所有值刷新	 *	 * @param view	 * @param t	 * @param pos	 * @param lv	 */	public void reshItem(View view, T t, int pos, AdapterView<?> lv) {		getView(pos, view, lv);	}	@Override	public int getCount() {		return list.size();	}	@Override	public T getItem(int arg0) {		return list.get(arg0);	}	@Override	public long getItemId(int arg0) {		return 0;	}	@Override	public View getView(int position, View convertView, ViewGroup parent) {		if (inflater == null) {			inflater = (LayoutInflater) parent.getContext().getSystemService(					Context.LAYOUT_INFLATER_SERVICE);		}		return initItemView(position, convertView, parent);	}	public abstract View initItemView(int position, View convertView,			ViewGroup parent);}